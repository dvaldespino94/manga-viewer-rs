/* automatically generated by rust-bindgen 0.60.1 */

use raylib::ffi::size_t;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArStream {
    unused: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArArchive {
    unused: u8,
}

#[allow(unused)]
extern "C" {
    pub fn ar_open_file(path: *const ::std::os::raw::c_char) -> *mut ArStream;

    pub fn ar_open_memory(data: *const ::std::os::raw::c_void, datalen: size_t) -> *mut ArStream;

    pub fn ar_close(stream: *mut ArStream);

    pub fn ar_read(
        stream: *mut ArStream,
        buffer: *mut ::std::os::raw::c_void,
        count: size_t,
    ) -> size_t;

    pub fn ar_seek(stream: *mut ArStream, offset: i64, origin: ::std::os::raw::c_int) -> bool;

    pub fn ar_skip(stream: *mut ArStream, count: i64) -> bool;

    pub fn ar_tell(stream: *mut ArStream) -> i64;

    pub fn ar_close_archive(ar: *mut ArArchive);

    pub fn ar_parse_entry(ar: *mut ArArchive) -> bool;

    pub fn ar_parse_entry_at(ar: *mut ArArchive, offset: i64) -> bool;

    pub fn ar_parse_entry_for(
        ar: *mut ArArchive,
        entry_name: *const ::std::os::raw::c_char,
    ) -> bool;

    pub fn ar_at_eof(ar: *mut ArArchive) -> bool;

    pub fn ar_entry_get_name(ar: *mut ArArchive) -> *mut ::std::os::raw::c_char;

    pub fn ar_entry_get_raw_name(ar: *mut ArArchive) -> *mut ::std::os::raw::c_char;

    pub fn ar_entry_get_offset(ar: *mut ArArchive) -> i64;

    pub fn ar_entry_get_size(ar: *mut ArArchive) -> size_t;

    pub fn ar_entry_get_filetime(ar: *mut ArArchive) -> i64;

    pub fn ar_entry_uncompress(
        ar: *mut ArArchive,
        buffer: *mut ::std::os::raw::c_void,
        count: size_t,
    ) -> bool;

    pub fn ar_get_global_comment(
        ar: *mut ArArchive,
        buffer: *mut ::std::os::raw::c_void,
        count: size_t,
    ) -> size_t;

    pub fn ar_open_rar_archive(stream: *mut ArStream) -> *mut ArArchive;

    pub fn ar_open_tar_archive(stream: *mut ArStream) -> *mut ArArchive;

    pub fn ar_open_zip_archive(stream: *mut ArStream, deflatedonly: bool) -> *mut ArArchive;

    pub fn ar_open_7z_archive(stream: *mut ArStream) -> *mut ArArchive;
}
